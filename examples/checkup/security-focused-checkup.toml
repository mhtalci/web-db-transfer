# Security-Focused Codebase Checkup Configuration
# Emphasizes security analysis and vulnerability detection

[checkup]
# Security-focused analysis
enable_quality_analysis = true
enable_import_analysis = true
enable_duplicate_detection = false  # Not security-critical
enable_structure_analysis = false  # Not security-critical
enable_coverage_analysis = false   # Focus on security first
enable_config_validation = true    # Important for security
enable_doc_validation = false      # Not security-critical

# No automatic changes for security analysis
auto_format = false
auto_fix_imports = false
auto_organize_files = false
auto_fix_quality = false

# Security-appropriate performance
parallel_analysis = true
max_workers = 2
timeout = 450  # 7.5 minutes

# Security logging
verbose = true  # Detailed logging for security
quiet = false
dry_run = true  # Safe mode for security analysis

# Security file filtering
include_patterns = ["*.py"]
exclude_patterns = [
    "venv/*",
    "__pycache__/*",
    "*.pyc",
    ".git/*",
    "build/*",
    "dist/*",
    "node_modules/*",
    ".tox/*",
    ".pytest_cache/*",
    "*.egg-info/*",
    "tests/*",  # Focus on production code
    "test_*",
    "*_test.py"
]
max_file_size = 2097152  # 2MB

[checkup.quality]
# Security-focused quality settings
max_complexity = 15  # Allow some complexity for security code
max_nesting_depth = 5
max_function_length = 100
max_class_length = 300
max_line_length = 88

# Security enforcement
enforce_docstrings = false  # Not critical for security
check_type_hints = true     # Important for security
enforce_naming_conventions = false

# Security-focused tools
use_flake8 = true
use_mypy = true
use_bandit = true  # Critical for security
use_pylint = false

# Security-focused code analysis
detect_code_smells = true
smell_threshold = 0.5  # More lenient for security code
check_dead_code = false    # Security code might appear unused
check_unused_variables = true

[checkup.imports]
# Security import analysis
remove_unused = false  # Don't modify for security analysis
organize_imports = false
check_circular = true  # Important for security
check_missing = true
analyze_dependencies = true  # Critical for security
detect_orphaned_modules = true

# No automatic import changes
use_isort = false

[checkup.security]
# Security-specific settings
check_hardcoded_secrets = true
check_dangerous_functions = true
check_sql_injection = true
check_xss_vulnerabilities = true
check_insecure_random = true
check_weak_crypto = true
check_path_traversal = true
check_command_injection = true

# Security patterns to detect
dangerous_functions = [
    "eval", "exec", "compile", "__import__",
    "input", "raw_input",  # Python 2/3 input functions
    "pickle.loads", "pickle.load",
    "yaml.load", "yaml.unsafe_load"
]

# Crypto-related patterns
weak_crypto_patterns = [
    "md5", "sha1", "des", "rc4",
    "random.random", "random.randint"
]

# Secret patterns
secret_patterns = [
    "password", "passwd", "pwd",
    "secret", "key", "token",
    "api_key", "apikey", "auth",
    "credential", "cred"
]

[checkup.bandit]
# Bandit security scanner configuration
enabled = true
confidence_level = "low"  # Catch more potential issues
severity_level = "low"    # Include all severity levels
exclude_tests = true      # Skip test files
format = "json"
output_file = "bandit-security-report.json"

# Bandit checks to include
include_checks = [
    "B101",  # assert_used
    "B102",  # exec_used
    "B103",  # set_bad_file_permissions
    "B104",  # hardcoded_bind_all_interfaces
    "B105",  # hardcoded_password_string
    "B106",  # hardcoded_password_funcarg
    "B107",  # hardcoded_password_default
    "B108",  # hardcoded_tmp_directory
    "B110",  # try_except_pass
    "B112",  # try_except_continue
    "B201",  # flask_debug_true
    "B301",  # pickle
    "B302",  # marshal
    "B303",  # md5
    "B304",  # des
    "B305",  # cipher
    "B306",  # mktemp_q
    "B307",  # eval
    "B308",  # mark_safe
    "B309",  # httpsconnection
    "B310",  # urllib_urlopen
    "B311",  # random
    "B312",  # telnetlib
    "B313",  # xml_bad_cElementTree
    "B314",  # xml_bad_ElementTree
    "B315",  # xml_bad_expatreader
    "B316",  # xml_bad_expatbuilder
    "B317",  # xml_bad_sax
    "B318",  # xml_bad_minidom
    "B319",  # xml_bad_pulldom
    "B320",  # xml_bad_etree
    "B321",  # ftplib
    "B322",  # input
    "B323",  # unverified_context
    "B324",  # hashlib_new_insecure_functions
    "B325",  # tempnam
    "B401",  # import_telnetlib
    "B402",  # import_ftplib
    "B403",  # import_pickle
    "B404",  # import_subprocess
    "B405",  # import_xml_etree
    "B406",  # import_xml_sax
    "B407",  # import_xml_expat
    "B408",  # import_xml_minidom
    "B409",  # import_xml_pulldom
    "B410",  # import_lxml
    "B411",  # import_xmlrpclib
    "B412",  # import_httpoxy
    "B413",  # import_pycrypto
    "B501",  # request_with_no_cert_validation
    "B502",  # ssl_with_bad_version
    "B503",  # ssl_with_bad_defaults
    "B504",  # ssl_with_no_version
    "B505",  # weak_cryptographic_key
    "B506",  # yaml_load
    "B507",  # ssh_no_host_key_verification
    "B601",  # paramiko_calls
    "B602",  # subprocess_popen_with_shell_equals_true
    "B603",  # subprocess_without_shell_equals_true
    "B604",  # any_other_function_with_shell_equals_true
    "B605",  # start_process_with_a_shell
    "B606",  # start_process_with_no_shell
    "B607",  # start_process_with_partial_path
    "B608",  # hardcoded_sql_expressions
    "B609",  # linux_commands_wildcard_injection
    "B610",  # django_extra_used
    "B611",  # django_rawsql_used
    "B701",  # jinja2_autoescape_false
    "B702",  # use_of_mako_templates
    "B703"   # django_mark_safe
]

[checkup.reporting]
# Security-focused reporting
generate_html_report = true
generate_json_report = true
generate_markdown_report = false
generate_xml_report = true

# Security report content
include_metrics = true
include_trends = false
include_suggestions = true
include_examples = false  # Don't include code examples in security reports

# Security HTML reports
html_theme = "security"
include_source_code = false  # Security consideration
syntax_highlighting = false
interactive_charts = false

output_directory = "security-reports"
report_filename_template = "security-checkup-{timestamp}"
compress_reports = true

[checkup.safety]
# Maximum security safety
create_backup = false  # No changes made
backup_directory = ".security-backups"
max_backups = 0
compress_backups = false

# No changes allowed in security analysis
max_file_moves = 0
max_file_deletions = 0
max_changes_per_file = 0
require_confirmation = true

# No validation needed (no changes)
enable_rollback = false
validate_before_changes = false
run_tests_after_changes = false
check_syntax_after_changes = false
auto_rollback_on_error = false

[checkup.security_rules]
# Custom security rules
critical_severity_patterns = [
    "eval\\s*\\(",
    "exec\\s*\\(",
    "pickle\\.loads?\\s*\\(",
    "yaml\\.load\\s*\\(",
    "subprocess\\.call\\s*\\([^)]*shell\\s*=\\s*True"
]

high_severity_patterns = [
    "password\\s*=\\s*['\"][^'\"]+['\"]",
    "secret\\s*=\\s*['\"][^'\"]+['\"]",
    "api_key\\s*=\\s*['\"][^'\"]+['\"]",
    "random\\.random\\s*\\(",
    "md5\\s*\\(",
    "sha1\\s*\\("
]

medium_severity_patterns = [
    "assert\\s+",
    "print\\s*\\(",  # Information disclosure
    "logging\\.debug\\s*\\(",
    "TODO.*security",
    "FIXME.*security"
]

# File patterns that require extra scrutiny
sensitive_file_patterns = [
    "*auth*",
    "*login*",
    "*password*",
    "*secret*",
    "*key*",
    "*token*",
    "*crypto*",
    "*security*",
    "*admin*"
]