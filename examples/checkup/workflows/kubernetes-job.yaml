# Kubernetes Job for Codebase Checkup
# Run checkup as a Kubernetes job

apiVersion: batch/v1
kind: Job
metadata:
  name: codebase-checkup
  labels:
    app: codebase-checkup
    type: quality-check
spec:
  template:
    metadata:
      labels:
        app: codebase-checkup
    spec:
      restartPolicy: Never
      containers:
      - name: checkup
        image: migration-assistant:checkup
        command:
        - migration-assistant
        - checkup
        - run
        - --config
        - examples/checkup/ci-checkup.toml
        - --report-json
        - --report-xml
        - --output-dir
        - /reports
        env:
        - name: PYTHONPATH
          value: "/workspace"
        volumeMounts:
        - name: source-code
          mountPath: /workspace
          readOnly: true
        - name: reports
          mountPath: /reports
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: source-code
        configMap:
          name: source-code-config
      - name: reports
        emptyDir: {}
  backoffLimit: 3

---
# CronJob for scheduled checkups
apiVersion: batch/v1
kind: CronJob
metadata:
  name: nightly-checkup
  labels:
    app: codebase-checkup
    type: scheduled-check
spec:
  schedule: "0 2 * * *"  # Every day at 2 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: codebase-checkup
            type: nightly-check
        spec:
          restartPolicy: Never
          containers:
          - name: nightly-checkup
            image: migration-assistant:checkup
            command:
            - migration-assistant
            - checkup
            - run
            - --config
            - examples/checkup/comprehensive-checkup.toml
            - --report-html
            - --report-json
            - --output-dir
            - /reports
            env:
            - name: PYTHONPATH
              value: "/workspace"
            - name: CHECKUP_SCHEDULE
              value: "nightly"
            volumeMounts:
            - name: source-code
              mountPath: /workspace
              readOnly: true
            - name: reports
              mountPath: /reports
            - name: config
              mountPath: /config
              readOnly: true
            resources:
              requests:
                memory: "512Mi"
                cpu: "200m"
              limits:
                memory: "1Gi"
                cpu: "1000m"
          volumes:
          - name: source-code
            persistentVolumeClaim:
              claimName: source-code-pvc
          - name: reports
            persistentVolumeClaim:
              claimName: reports-pvc
          - name: config
            configMap:
              name: checkup-config
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1

---
# ConfigMap for checkup configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: checkup-config
  labels:
    app: codebase-checkup
data:
  kubernetes-checkup.toml: |
    [checkup]
    # Kubernetes-optimized configuration
    enable_quality_analysis = true
    enable_import_analysis = true
    enable_duplicate_detection = false  # Can be resource intensive
    enable_coverage_analysis = true
    
    # No cleanup in Kubernetes jobs
    auto_format = false
    auto_fix_imports = false
    auto_organize_files = false
    
    # Resource-conscious settings
    parallel_analysis = true
    max_workers = 2
    timeout = 600  # 10 minutes
    
    # Kubernetes-appropriate output
    verbose = false
    quiet = true
    
    # Reporting for Kubernetes
    generate_html_report = true
    generate_json_report = true
    generate_xml_report = true
    output_directory = "/reports"
    
    # File filtering
    exclude_patterns = [
        "venv/*", "__pycache__/*", "*.pyc", ".git/*",
        "build/*", "dist/*", "node_modules/*"
    ]
    
    [checkup.quality]
    max_complexity = 10
    max_line_length = 88
    use_flake8 = true
    use_mypy = true
    use_bandit = true
    
    [checkup.reporting]
    include_metrics = true
    include_suggestions = true
    compress_reports = true

---
# PersistentVolumeClaim for source code
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: source-code-pvc
  labels:
    app: codebase-checkup
spec:
  accessModes:
    - ReadOnlyMany
  resources:
    requests:
      storage: 1Gi

---
# PersistentVolumeClaim for reports
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: reports-pvc
  labels:
    app: codebase-checkup
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi

---
# Service to expose reports
apiVersion: v1
kind: Service
metadata:
  name: checkup-reports
  labels:
    app: codebase-checkup
spec:
  selector:
    app: report-server
  ports:
  - port: 80
    targetPort: 80
    name: http
  type: ClusterIP

---
# Deployment for report server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: report-server
  labels:
    app: report-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: report-server
  template:
    metadata:
      labels:
        app: report-server
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: reports
          mountPath: /usr/share/nginx/html
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: reports
        persistentVolumeClaim:
          claimName: reports-pvc